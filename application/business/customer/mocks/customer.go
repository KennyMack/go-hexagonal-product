// Code generated by MockGen. DO NOT EDIT.
// Source: application/business/customer/customer.go

// Package mock_businesscustomer is a generated GoMock package.
package mock_businesscustomer

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	businesscustomer "github.com/kennymack/go-hexagonal-product/application/business/customer"
)

// MockCustomerInterface is a mock of CustomerInterface interface.
type MockCustomerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerInterfaceMockRecorder
}

// MockCustomerInterfaceMockRecorder is the mock recorder for MockCustomerInterface.
type MockCustomerInterfaceMockRecorder struct {
	mock *MockCustomerInterface
}

// NewMockCustomerInterface creates a new mock instance.
func NewMockCustomerInterface(ctrl *gomock.Controller) *MockCustomerInterface {
	mock := &MockCustomerInterface{ctrl: ctrl}
	mock.recorder = &MockCustomerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomerInterface) EXPECT() *MockCustomerInterfaceMockRecorder {
	return m.recorder
}

// Disable mocks base method.
func (m *MockCustomerInterface) Disable() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Disable")
	ret0, _ := ret[0].(error)
	return ret0
}

// Disable indicates an expected call of Disable.
func (mr *MockCustomerInterfaceMockRecorder) Disable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disable", reflect.TypeOf((*MockCustomerInterface)(nil).Disable))
}

// Enable mocks base method.
func (m *MockCustomerInterface) Enable() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Enable")
	ret0, _ := ret[0].(error)
	return ret0
}

// Enable indicates an expected call of Enable.
func (mr *MockCustomerInterfaceMockRecorder) Enable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enable", reflect.TypeOf((*MockCustomerInterface)(nil).Enable))
}

// GetDeactivationReason mocks base method.
func (m *MockCustomerInterface) GetDeactivationReason() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeactivationReason")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDeactivationReason indicates an expected call of GetDeactivationReason.
func (mr *MockCustomerInterfaceMockRecorder) GetDeactivationReason() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeactivationReason", reflect.TypeOf((*MockCustomerInterface)(nil).GetDeactivationReason))
}

// GetEmail mocks base method.
func (m *MockCustomerInterface) GetEmail() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmail")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetEmail indicates an expected call of GetEmail.
func (mr *MockCustomerInterfaceMockRecorder) GetEmail() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmail", reflect.TypeOf((*MockCustomerInterface)(nil).GetEmail))
}

// GetId mocks base method.
func (m *MockCustomerInterface) GetId() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetId")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetId indicates an expected call of GetId.
func (mr *MockCustomerInterfaceMockRecorder) GetId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetId", reflect.TypeOf((*MockCustomerInterface)(nil).GetId))
}

// GetName mocks base method.
func (m *MockCustomerInterface) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockCustomerInterfaceMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockCustomerInterface)(nil).GetName))
}

// GetStatus mocks base method.
func (m *MockCustomerInterface) GetStatus() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatus")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetStatus indicates an expected call of GetStatus.
func (mr *MockCustomerInterfaceMockRecorder) GetStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockCustomerInterface)(nil).GetStatus))
}

// IsValid mocks base method.
func (m *MockCustomerInterface) IsValid() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsValid")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsValid indicates an expected call of IsValid.
func (mr *MockCustomerInterfaceMockRecorder) IsValid() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsValid", reflect.TypeOf((*MockCustomerInterface)(nil).IsValid))
}

// MockCustomerServiceInterface is a mock of CustomerServiceInterface interface.
type MockCustomerServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerServiceInterfaceMockRecorder
}

// MockCustomerServiceInterfaceMockRecorder is the mock recorder for MockCustomerServiceInterface.
type MockCustomerServiceInterfaceMockRecorder struct {
	mock *MockCustomerServiceInterface
}

// NewMockCustomerServiceInterface creates a new mock instance.
func NewMockCustomerServiceInterface(ctrl *gomock.Controller) *MockCustomerServiceInterface {
	mock := &MockCustomerServiceInterface{ctrl: ctrl}
	mock.recorder = &MockCustomerServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomerServiceInterface) EXPECT() *MockCustomerServiceInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCustomerServiceInterface) Create(name string, price float64) (businesscustomer.CustomerInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", name, price)
	ret0, _ := ret[0].(businesscustomer.CustomerInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCustomerServiceInterfaceMockRecorder) Create(name, price interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCustomerServiceInterface)(nil).Create), name, price)
}

// Disable mocks base method.
func (m *MockCustomerServiceInterface) Disable(customer businesscustomer.CustomerInterface) (businesscustomer.CustomerInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Disable", customer)
	ret0, _ := ret[0].(businesscustomer.CustomerInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Disable indicates an expected call of Disable.
func (mr *MockCustomerServiceInterfaceMockRecorder) Disable(customer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disable", reflect.TypeOf((*MockCustomerServiceInterface)(nil).Disable), customer)
}

// Enable mocks base method.
func (m *MockCustomerServiceInterface) Enable(customer businesscustomer.CustomerInterface) (businesscustomer.CustomerInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Enable", customer)
	ret0, _ := ret[0].(businesscustomer.CustomerInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Enable indicates an expected call of Enable.
func (mr *MockCustomerServiceInterfaceMockRecorder) Enable(customer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enable", reflect.TypeOf((*MockCustomerServiceInterface)(nil).Enable), customer)
}

// Get mocks base method.
func (m *MockCustomerServiceInterface) Get(id string) (businesscustomer.CustomerInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(businesscustomer.CustomerInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCustomerServiceInterfaceMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCustomerServiceInterface)(nil).Get), id)
}

// MockCustomerReaderInterface is a mock of CustomerReaderInterface interface.
type MockCustomerReaderInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerReaderInterfaceMockRecorder
}

// MockCustomerReaderInterfaceMockRecorder is the mock recorder for MockCustomerReaderInterface.
type MockCustomerReaderInterfaceMockRecorder struct {
	mock *MockCustomerReaderInterface
}

// NewMockCustomerReaderInterface creates a new mock instance.
func NewMockCustomerReaderInterface(ctrl *gomock.Controller) *MockCustomerReaderInterface {
	mock := &MockCustomerReaderInterface{ctrl: ctrl}
	mock.recorder = &MockCustomerReaderInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomerReaderInterface) EXPECT() *MockCustomerReaderInterfaceMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockCustomerReaderInterface) Get(id string) (businesscustomer.CustomerInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(businesscustomer.CustomerInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCustomerReaderInterfaceMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCustomerReaderInterface)(nil).Get), id)
}

// MockCustomerWriterInterface is a mock of CustomerWriterInterface interface.
type MockCustomerWriterInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerWriterInterfaceMockRecorder
}

// MockCustomerWriterInterfaceMockRecorder is the mock recorder for MockCustomerWriterInterface.
type MockCustomerWriterInterfaceMockRecorder struct {
	mock *MockCustomerWriterInterface
}

// NewMockCustomerWriterInterface creates a new mock instance.
func NewMockCustomerWriterInterface(ctrl *gomock.Controller) *MockCustomerWriterInterface {
	mock := &MockCustomerWriterInterface{ctrl: ctrl}
	mock.recorder = &MockCustomerWriterInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomerWriterInterface) EXPECT() *MockCustomerWriterInterfaceMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockCustomerWriterInterface) Save(customer businesscustomer.CustomerInterface) (businesscustomer.CustomerInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", customer)
	ret0, _ := ret[0].(businesscustomer.CustomerInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockCustomerWriterInterfaceMockRecorder) Save(customer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockCustomerWriterInterface)(nil).Save), customer)
}

// MockCustomerPersistenceInterface is a mock of CustomerPersistenceInterface interface.
type MockCustomerPersistenceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerPersistenceInterfaceMockRecorder
}

// MockCustomerPersistenceInterfaceMockRecorder is the mock recorder for MockCustomerPersistenceInterface.
type MockCustomerPersistenceInterfaceMockRecorder struct {
	mock *MockCustomerPersistenceInterface
}

// NewMockCustomerPersistenceInterface creates a new mock instance.
func NewMockCustomerPersistenceInterface(ctrl *gomock.Controller) *MockCustomerPersistenceInterface {
	mock := &MockCustomerPersistenceInterface{ctrl: ctrl}
	mock.recorder = &MockCustomerPersistenceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomerPersistenceInterface) EXPECT() *MockCustomerPersistenceInterfaceMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockCustomerPersistenceInterface) Get(id string) (businesscustomer.CustomerInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(businesscustomer.CustomerInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCustomerPersistenceInterfaceMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCustomerPersistenceInterface)(nil).Get), id)
}

// Save mocks base method.
func (m *MockCustomerPersistenceInterface) Save(customer businesscustomer.CustomerInterface) (businesscustomer.CustomerInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", customer)
	ret0, _ := ret[0].(businesscustomer.CustomerInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockCustomerPersistenceInterfaceMockRecorder) Save(customer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockCustomerPersistenceInterface)(nil).Save), customer)
}
